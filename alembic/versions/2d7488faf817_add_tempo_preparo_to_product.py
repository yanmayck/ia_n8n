"""'add_tempo_preparo_to_product'

Revision ID: 2d7488faf817
Revises: 6e816ca92446
Create Date: 2025-07-23 03:47:48.739705

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2d7488faf817'
down_revision: Union[str, None] = '6e816ca92446'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # As tabelas abaixo foram removidas em migrações posteriores, então usamos execute com IF EXISTS para segurança.
    op.execute('DROP TABLE IF EXISTS user_memories CASCADE')
    op.execute('DROP TABLE IF EXISTS langchain_pg_embedding CASCADE')
    op.execute('DROP TABLE IF EXISTS langchain_pg_collection CASCADE')
    
    # A coluna 'tempo_preparo_minutos' é adicionada na migração '615e5c534025' que recria a tabela de produtos.
    # Portanto, esta linha é redundante e causa um erro 'UndefinedTable' ao criar um banco do zero.
    # op.add_column('products', sa.Column('tempo_preparo_minutos', sa.Integer(), nullable=True))
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # A operação de downgrade correspondente também é comentada.
    # op.drop_column('products', 'tempo_preparo_minutos')
    op.create_table('langchain_pg_collection',
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    sa.UniqueConstraint('name', name='langchain_pg_collection_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_index(op.f('ix_cmetadata_gin'), 'langchain_pg_embedding', ['cmetadata'], unique=False, postgresql_using='gin')
    op.create_table('user_memories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('user_memories_pkey'))
    )
    op.create_index(op.f('ix_user_memories_session_id'), 'user_memories', ['session_id'], unique=False)
    op.create_index(op.f('ix_user_memories_id'), 'user_memories', ['id'], unique=False)
    pass
    # ### end Alembic commands ###
